import ij.measure.*; // to access ij.measure.ResultsTable
import ij.ImagePlus;
import ij.process.ImageProcessor;
import org.micromanager.internal.MMStudio;
import org.micromanager.data.Coordinates;
import org.micromanager.data.Datastore;
import java.util.Date;
import java.lang.Thread;


Double pixel2micro = 0.1764;
Double XWidth = 4096;
Double YWidth = 2160;
Double XCenter = XWidth/2;
Double YCenter = YWidth/2;
int intervalMs = 500;//５００Msまつ
int timeinterval = 5000;//１０分待つ
int NumOfCells = 3;//3細胞撮る
int timelength = 4;//７２回撮る
int zstacklength = 5;//3スライス動かす
int panelnumx = 1;
int panelnumy = 1; //9panels
int panel_X_width = 600;
int panel_Y_width = 300;
Double diffmove = 2.0;//2マイクロメーター？うごく
int StepWide = 1; // acquiring step for widefield images ----just number 
int StepHigh = 2; // acquiring step for highresolution images -----just number
int time_indexH = 0;
int time_indexL = 0;
int flagwide = 0;
int flaghigh = 0;
int row = 0;
ResultsTable RT = ResultsTable.getResultsTable(); 

//*********************************************************   initialize acquisition    ***********************
// parameters
channelGroup = "Parts";
int[] exposures = {100,100};
//String [] channels = {"CSUX 488","CSUX 561"};
//String [] shutters = {"Vincent-D3 488","Vincent-D3 561"};
String [] channels = {"CSUX 561"};
String [] shutters = {"Vincent-D3 561"};
//Color[] colors = {Color.GREEN,Color.RED};
Color[] colors = {Color.RED};

//顕微鏡室パソコンではD:/MSM tempをF:/MSM tempにする。
//Dateオブジェクトを生成する
	    Date dTime = new Date();
 
	    //Dateの設定内容を出力
	    print("F:/MSM temp/high" + dTime.toString());	
	    Atime = dTime.toString();
	    
	     //Dateの設定内容のうち１２番目から１９番目を出力
	    print(Atime.substring(12,19));

// File locations (high reso) _220523gy　
dirhigh = "F:/MSM temp" + "/"  + Atime.substring(11,12) + Atime.substring(12,13) + Atime.substring(14,15) + Atime.substring(15,16)  + "high"; //ディレクトリの場所指定…高倍率
StoreHigh = mm.data().createMultipageTIFFDatastore(dirhigh, false, false); // Create datastore
targetStore = mm.data().createRAMDatastore(); // Use RAM datastore without saving
DisplayHigh = mm.displays().createDisplay(StoreHigh); // Create displayer for datastore

// File locations (wide field) _220523gy
dirwide = "F:/MSM temp" + "/"+ Atime.substring(11,12) + Atime.substring(12,13) + Atime.substring(14,15) + Atime.substring(15,16) + "wide";//ディレクトリの場所指定…広視野
StoreWide = mm.data().createMultipageTIFFDatastore(dirwide, false, false);
targetStore1 = mm.data().createRAMDatastore();
DisplayWide = mm.displays().createDisplay(StoreWide);

cb = Coordinates.builder();

// get stage information
STAGE = mm.core().getXYStageDevice();
//*********************************************************   initialize acquisition end ***********************


// ******* for time lapse
for(int t=0;t<timelength;t++){

	// !!!!!!!!  for time lapse steps   !!!!!!!!!!!!
	if(t%StepWide == 0){
	     flagwide = 1;
	}
	else{
	     flagwide = 0;
	}
	if(t%StepHigh == 0){
	     flaghigh = 1;
	}	
	else{
	     flaghigh = 0;
	}
	// !!!!!!!!  for time lapse steps end  !!!!!!!!!!!!	

//*****************************************************************************************
//**********************   XY paneling start **********************************************
   for(int qy=0;qy<panelnumy;qy++){	
	for(int qx=0;qx<panelnumx;qx++){
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%%    acquire if condition flag is 1
		if(flagwide == 1){
		//************ 	     Acquire wide field images  **********************
		mm.core().setCameraDevice("TSICam"); //Camera exculusive for MSM wide field
		//mm.core().setCameraDevice("Camera");	
		mm.core().setShutterDevice("Arduino-Shutter");
		//mm.core().setShutterDevice("Shutter");
		//上の部分はdemoと本番でデバイスを変えること。
		mm.core().setExposure(1000);
	
		images = mm.live().snap(true); 
		img = images.get(0);
	
		// save image into cb _220523gy
		coord = cb.c(0).t(time_indexL).z(0).p(qx+(panelnumx*qy));

		cImg = img.copyAtCoords(coord.build());
	 	StoreWide.putImage(cImg);
		//************ 	     Acquire wide field images  end **********************

		// transform the snap image into ImagePlus for ImageJ function
		ImageProcessor ImPro = mm.DataManager.ij().createProcessor(img);
		ImagePlus ImPlu = new ImagePlus("title",ImPro);

		// ---------------------     Image Analysis  ------------------------------------
		//ij.IJ.setAutoThreshold(ImPlu,"Mean dark");  // set auto threshold（閾値）
		ij.IJ.setThreshold(ImPlu,121,65535);
		ij.IJ.run(ImPlu, "Smooth", "");
		ij.IJ.run(ImPlu, "Convert to Mask", "");  // make mask image by the thresholded image
		ij.IJ.run(ImPlu, "Erode", "");
		ij.IJ.run("Set Measurements...", "center stack display redirect=None decimal=3"); // set initial condition for set measurements
		ij.IJ.run(ImPlu, "Analyze Particles...", "size=100-Infinity show=Outlines display clear"); // run analyze particles
		RT = ResultsTable.getResultsTable(); // make results table
//		ResultsTable RT = ResultsTable.getResultsTable(); // make results table
//		int row = RT.getCounter()-1;
      row = RT.getCounter()-1;
		print(row);
		RT.show("Results");  // show results

		// ---------------------     Image Analysis  end ------------------------------------

		}
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%%    don't acquire if condition flag is not 1		
		else{
		   mm.core().sleep(intervalMs);
		}
		// %%%%%%    acquire if condition flag is 1 end 
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		


		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%%    acquire if condition flag is 1
		if(flaghigh == 1){
		// *****  XY Stage Control for each cell ******
		for(p=0; p<NumOfCells;p++){
	   	print(RT.getValueAsDouble(RT.X_CENTER_OF_MASS,p));  // print the i-th X_CENTER_OF_MASS
			print(RT.getValueAsDouble(RT.Y_CENTER_OF_MASS,p));  // print the i-th Y_CENTER_OF_MASS

			Double Xcoordi = RT.getValueAsDouble(RT.X_CENTER_OF_MASS,p);  // get x cooridinates in pixel
			Double Ycoordi = RT.getValueAsDouble(RT.Y_CENTER_OF_MASS,p);  // get y cooridinates in pixel

			XMove = (XCenter - Xcoordi) * pixel2micro; // transform pixel to micrometer
			YMove = (YCenter - Ycoordi) * pixel2micro; // transform pixel to micrometer

			print("X move");
			print(XMove);
			print("Y move");
			print(YMove);
	
			// move stage
			mm.core().setRelativeXYPosition(STAGE,XMove,YMove);
			mm.core().sleep(intervalMs);

			// ************ Chanell *********************
			for(int j=0;j<channels.length;j++){
				mm.scripter().message("Acquiring frame '0', channel " +channels[j]+".");
				mm.core().setExposure(exposures[0]);
				mm.core().setShutterDevice(shutters[0]); // switch illumination

				// *************************************
				// *****     z stack			
				heightorigin = mm.core().getProperty("Focus","Position");
				Double heightoriginvalue = Double.parseDouble(heightorigin);
				for(int z=0;z<zstacklength;z++){
					height = mm.core().getProperty("Focus","Position");
					Double heightvalue = Double.parseDouble(height);
					print(height.getClass().getSimpleName());
					print("height");
					print(height);
					Zmove = (heightvalue - diffmove); 

					// *******************************************************************
					// *********    Acquire high resolution images _220523gy    **********
					// define HiRes camera
					mm.core().setCameraDevice("Andor");//camera exclusive for MSM high reso本番ではこちら。
					List HiRes_images = mm.live().snap(true);
					HiRes_img = HiRes_images.get(0);
					// save image into cb _220523gy
					HiRes_coord = cb.c(j).t(time_indexH).z(z).p(p+(qx*NumOfCells)+(qy*NumOfCells*panelnumx));//

					HiRes_cImg = HiRes_img.copyAtCoords(HiRes_coord.build());
					StoreHigh.putImage(HiRes_cImg);
					mm.core().setProperty("Focus","Position",Zmove);
					}
					// *********  Acquire high resolution images   end  ******************
					
				mm.core().setProperty("Focus","Position",heightoriginvalue);
				// *****     z stack end
				// *************************************				
			}
			// ************ Chanell  end *********************
			// Goto origin position in the current panel 
			mm.core().setRelativeXYPosition(STAGE,-XMove,-YMove);
			mm.core().sleep(intervalMs);
		}
		// ******  XY Stage Control for each cell end *******

		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%%  don't acquire if condition flag is not 1		
		}
		else{
		   mm.core().sleep(intervalMs);		
		}
		// %%%%%%    acquire if condition flag is 1 end
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		

	mm.core().sleep(timeinterval);
	mm.core().setRelativeXYPosition(STAGE,panel_X_width,0); // for X paneling
	ij.IJ.run("Close");
	ij.IJ.run("Close","Drawing of title");
	}
	mm.core().sleep(intervalMs);
	mm.core().setRelativeXYPosition(STAGE,-(panelnumx-1)*panel_X_width,0); // X paneling end 
	mm.core().sleep(timeinterval);
	mm.core().setRelativeXYPosition(STAGE,0,panel_Y_width);  // for Y paneling
	}
	mm.core().sleep(intervalMs);
	mm.core().setRelativeXYPosition(STAGE,0,-panelnumy*panel_Y_width); // Y paneling end
	time_indexL = time_indexL + 1;
	time_indexH = time_indexH + 1;	
// *******  for time lapse	
}

